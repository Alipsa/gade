import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// Run `gradle runtimeZip` to create the distributions
plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'org.beryx.runtime' version '1.13.0'
    //id "com.github.spotbugs" version "5.0.9"
    // Allows us to do gradle dependencyUpdates -Drevision=release
    id "com.github.ben-manes.versions" version "0.47.0"
}

group = 'se.alipsa'
version = '1.0.0-SNAPSHOT'
description = 'Gade, A Groovy Analytics Development Environment'
ext.jarName="${rootProject.name}-${version}.jar"
ext.releaseTag=version.endsWith('SNAPSHOT') ? "${version}-beta" : "${version}-GA"

javafx {
    version = "20.0.1" // must be in sync with install.sh
    modules = ['javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing']
}

application {
    mainClass = 'se.alipsa.gade.Gade'
}


repositories {
    mavenLocal() // Slows down the build (a lot), use only if local SNAPSHOTS are needed
    mavenCentral()
    maven {
        url = uri('https://repo.gradle.org/gradle/libs-releases')
    }
    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    def jacksonVersion = '2.15.2'
    def tikaVersion = '2.8.0'
    def jgitVersion = '6.6.0.202305301015-r'
    //def jgitVersion = '6.5.0.202303070854-r'
    def tablesawVersion = "0.43.1"
    def log4jVersion = "2.20.0"
    def groovyVersion = "4.0.12"

    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation "org.apache.groovy:groovy-all:${groovyVersion}"
    implementation 'org.apache.ivy:ivy:2.5.1'
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    // Used by se.alipsa.gade.utils.SemanticVersion
    implementation 'org.apache.maven:maven-artifact:3.9.2'
    implementation "org.apache.tika:tika-core:${tikaVersion}"
    implementation "org.apache.tika:tika-parsers-standard-package:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-text-module:${tikaVersion}"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.0'
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"

    implementation 'commons-io:commons-io:2.13.0'
    implementation 'com.github.jsqlparser:jsqlparser:4.6'
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${jgitVersion}"

    implementation 'org.openjdk.nashorn:nashorn-core:15.4'
    implementation 'org.gradle:gradle-tooling-api:8.1.1'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'io.github.classgraph:classgraph:4.8.160'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    implementation "tech.tablesaw:tablesaw-core:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-jsplot:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-excel:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-json:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-html:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-aggregate:${tablesawVersion}"
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'se.alipsa:fx-yearmonth-picker:1.1.0'
    implementation 'se.alipsa.groovy:data-utils:1.0.4-SNAPSHOT'
    implementation 'se.alipsa.groovy:gmd:1.0.7'
    implementation 'se.alipsa:simple-rest:1.0.5'
    implementation 'se.alipsa.groovy:matrix:1.1.1'
    implementation 'se.alipsa.groovy:matrix-datasets:1.0.1'
    implementation 'se.alipsa.groovy:matrix-spreadsheet:1.0.0'
    implementation 'se.alipsa.groovy:matrix-charts:1.0.0-SNAPSHOT'

    implementation 'com.github.hervegirod:fxsvgimage:1.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'net.jodah:concurrentunit:0.4.6'
    testImplementation "org.eclipse.jgit:org.eclipse.jgit.http.server:${jgitVersion}"
    testImplementation 'org.eclipse.jetty:jetty-server:10.0.15'
    testImplementation 'org.eclipse.jetty:jetty-servlet:10.0.15'
    //testImplementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
    //spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    withSourcesJar()
    withJavadocJar()
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MMM-dd_HH.mm.ss')
    return formattedDate
}

clean {
    // include the platform jdks as otherwise, updating the version will not "take"
    delete "$projectDir/platform/linux"
    delete "$projectDir/platform/win"
    delete "$projectDir/platform/mac"
}

processResources.doLast {
    ant.propertyfile(file: "${projectDir}/version.properties") {
        ant.entry(key: "version", value: "${project.version}")
        ant.entry(key: "jar.name", value: "${jarName}")
        ant.entry(key: "release.tag", value: "${releaseTag}")
        ant.entry(key: "build.date", value: "${getDate()}")
    }
    ant.copy(file: "${projectDir}/version.properties", todir: "${buildDir}/resources/main" )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

/*
javadoc {
    source = sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}
 */

artifacts {
    archives sourcesJar
    archives javadocJar
}

runtime {
    //options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    // If there are issues, consider including more modules, see https://docs.oracle.com/en/java/javase/17/docs/api/index.html
    modules.set(['javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing', 'java.scripting',
               'java.management', 'java.sql', 'java.naming', 'jdk.crypto.ec', 'java.prefs', 'java.xml',
               'java.compiler', 'java.scripting', 'java.desktop', 'jdk.dynalink', 'jdk.security.auth',
               'java.security.jgss'])
    launcher {
        noConsole = true
    }
    // check for latest FULL versions here: https://bell-sw.com/pages/downloads/#/java-17-lts
    def baseUrl = "https://download.bell-sw.com/java"
    def version = "17.0.7+7"

    targetPlatform("linux") {
        jdkHome = jdkDownload("${baseUrl}/${version}/bellsoft-jdk${version}-linux-amd64-full.tar.gz") {
            downloadDir = "$projectDir/platform/linux"
        }
    }
    targetPlatform("win") {
        jdkHome = jdkDownload("${baseUrl}/${version}/bellsoft-jdk${version}-windows-amd64-full.zip") {
            downloadDir = "$projectDir/platform/win"
        }
    }
    targetPlatform("mac") {
        // https://download.bell-sw.com/java/17.0.6+10/bellsoft-jdk17.0.6+10-macos-aarch64-full.tar.gz
        // "${baseUrl}/${version}/bellsoft-jdk${version}-macos-amd64-full.tar.gz"
        jdkHome = jdkDownload("${baseUrl}/${version}/bellsoft-jdk${version}-macos-aarch64-full.tar.gz") {
            downloadDir = "$projectDir/platform/mac"
        }
    }
}

tasks.runtime.doLast {
    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-linux/")
        include 'createLauncher.sh'
        include '*.png'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-linux/")
        include '*.sh'
    }

    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-mac/")
        include '*.png'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-mac/")
        include '*.sh'
    }

    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-win/")
        include '*.ico'
        include '*.ps1'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-win/")
    }

    copy {
        from("$projectDir")
        into("$buildDir/image/gade-linux/")
        include 'version.properties'
    }
    copy {
        from("$projectDir")
        into("$buildDir/image/gade-mac/")
        include 'version.properties'
    }
    copy {
        from("$projectDir")
        into("$buildDir/image/gade-win/")
        include 'version.properties'
    }
}

tasks.runtimeZip.doLast {
    ant.move(todir:"$buildDir") {
        ant.fileset(dir: "$buildDir") {
            include(name: "image-*.zip")
        }
        ant.mapper(type: "glob", from: "image-*.zip", to: "gade-*-${version}.zip")
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

/* 4.7.1 is the default version for plugin version 5.09
spotbugs {
    toolVersion = '4.7.1'
}
 */

/*
spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
*/