// Run `gradle runtimeZip` to create the distributions
plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.runtime' version '1.12.7'
    //id "com.github.spotbugs" version "5.0.9"
    // Allows us to do gradle dependencyUpdates -Drevision=release
    id "com.github.ben-manes.versions" version "0.43.0"
}

group = 'se.alipsa'
version = '1.0.0-SNAPSHOT'
description = 'Gade, A Groovy Analytics Development Environment'
java.sourceCompatibility = JavaVersion.VERSION_17
ext.jarName="${rootProject.name}-${version}.jar"
ext.releaseTag=version.endsWith('SNAPSHOT') ? "${version}-beta" : "${version}-GA"

javafx {
    version = "19"
    modules = ['javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing']
}

application {
    mainClass = 'se.alipsa.gade.Gade'
}


repositories {
    mavenLocal() // Slows down the build, use only if local SNAPSHOTS are needed
    mavenCentral()
    maven {
        url = uri('https://repo.gradle.org/gradle/libs-releases')
    }
    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    def jacksonVersion = '2.14.0'
    def tikaVersion = '2.6.0'
    def jgitVersion = '6.4.0.202211300538-r'
    def tablesawVersion = "0.43.1"
    def lo4jVersion = "2.19.0"
    def groovyVersion = "4.0.6"

    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation "org.apache.groovy:groovy-all:${groovyVersion}"
    implementation 'org.apache.ivy:ivy:2.5.0'
    implementation "org.apache.logging.log4j:log4j-api:${lo4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${lo4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${lo4jVersion}"
    implementation 'org.apache.maven:maven-artifact:3.8.6'
    implementation "org.apache.tika:tika-core:${tikaVersion}"
    implementation "org.apache.tika:tika-parsers-standard-package:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-text-module:${tikaVersion}"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.0'
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.github.jsqlparser:jsqlparser:4.5'
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${jgitVersion}"

    implementation 'org.openjdk.nashorn:nashorn-core:15.4'
    implementation 'org.gradle:gradle-tooling-api:7.5.1'
    implementation 'org.jetbrains:annotations:23.1.0'
    implementation 'io.github.classgraph:classgraph:4.8.152'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    implementation "tech.tablesaw:tablesaw-core:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-jsplot:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-excel:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-json:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-html:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-aggregate:${tablesawVersion}"
    implementation 'se.alipsa.groovy:data-utils:1.0.3-SNAPSHOT'
    implementation 'se.alipsa.groovy:gmd:1.0.4'
    implementation 'se.alipsa:fx-yearmonth-picker:1.1.0'
    //implementation 'se.alipsa:simple-rest:1.0.3'

    implementation 'com.github.hervegirod:fxsvgimage:1.0b2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'net.jodah:concurrentunit:0.4.6'

    //spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

processResources.doLast {
    ant.propertyfile(file: "${projectDir}/version.properties") {
        ant.entry(key: "version", value: "${project.version}")
        ant.entry(key: "jar.name", value: "${jarName}")
        ant.entry(key: "release.tag", value: "${releaseTag}")
    }
    ant.copy(file: "${projectDir}/version.properties", todir: "${buildDir}/resources/main" )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

javadoc {
    source = sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

runtime {
    //options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    // If there are issues, consider including more modules, see https://docs.oracle.com/en/java/javase/17/docs/api/index.html
    modules = ['javafx.controls', 'javafx.web', 'javafx.media', 'javafx.swing', 'java.scripting',
               'java.management', 'java.sql', 'java.naming', 'jdk.crypto.ec', 'java.prefs', 'java.xml',
               'java.scripting', 'java.desktop', 'jdk.dynalink']
    launcher {
        noConsole = true
    }

    targetPlatform("linux") {
        jdkHome = jdkDownload("https://download.bell-sw.com/java/17.0.4+8/bellsoft-jdk17.0.4+8-linux-amd64-full.tar.gz") {
            downloadDir = "$projectDir/platform/linux"
        }
    }
    targetPlatform("win") {
        jdkHome = jdkDownload("https://download.bell-sw.com/java/17.0.4+8/bellsoft-jdk17.0.4+8-windows-amd64-full.zip") {
            downloadDir = "$projectDir/platform/win"
        }
    }
    targetPlatform("mac") {
        jdkHome = jdkDownload("https://download.bell-sw.com/java/17.0.4+8/bellsoft-jdk17.0.4+8-macos-amd64-full.zip") {
            downloadDir = "$projectDir/platform/mac"
        }
    }
}

tasks.runtime.doLast {
    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-linux/")
        include 'createLauncher.sh'
        include '*.png'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-linux/")
        include '*.sh'
    }

    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-mac/")
        include '*.png'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-mac/")
        include '*.sh'
    }

    copy {
        from("$projectDir/src/bin/")
        into("$buildDir/image/gade-win/")
        include '*.ico'
        include '*.ps1'
    }
    copy {
        from("$projectDir/src/bin/cponly")
        into("$buildDir/image/gade-win/")
    }

    copy {
        from("$projectDir")
        into("$buildDir/image/gade-linux/")
        include 'version.properties'
    }
    copy {
        from("$projectDir")
        into("$buildDir/image/gade-mac/")
        include 'version.properties'
    }
    copy {
        from("$projectDir")
        into("$buildDir/image/gade-win/")
        include 'version.properties'
    }
}

tasks.runtimeZip.doLast {
    ant.move(todir:"$buildDir") {
        ant.fileset(dir: "$buildDir") {
            include(name: "image-*.zip")
        }
        ant.mapper(type: "glob", from: "image-*.zip", to: "gade-*-${version}.zip")
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

/* 4.7.1 is the default version for plugin version 5.09
spotbugs {
    toolVersion = '4.7.1'
}
 */

/*
spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
*/